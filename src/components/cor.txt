     import { useNavigate } from "react-router-dom"
import assets from "../assets/assets"
import { arrayUnion, collection, doc, DocumentData, getDocs, query, serverTimestamp, setDoc, updateDoc, where } from "firebase/firestore"
import { db } from "../config/firebase"
import { useContext, useState } from "react"
import { AppContext } from "../context/AppContext"
// eslint-disable-next-line
import { userData } from "../context/AppContext"
import { toast } from "react-toastify"

export const LeftSideBar = () => {

    const navigate = useNavigate()
    const { userData, chatData } = useContext(AppContext)
    const [user, setUser] = useState<DocumentData | null>(null)
    const [showSearch, setShowSearch] = useState<boolean>(false)
    const [userExists, setUserExists] = useState<boolean>(false)


    const inputHandler = async (event: React.ChangeEvent<HTMLInputElement>) => {
        try {
            const input = event.target.value
            if (input) {
                setShowSearch(true)
                const userRef = collection(db, "users")
                const q = query(userRef, where("username", "==", input.toLocaleLowerCase()))
                const querySnap = await getDocs(q)
                if (!querySnap.empty && querySnap.docs[0].data().id !== userData[0].id) {
                     chatData.forEach((user) => {
                        if(user.rid === querySnap.docs[0].data().id){
                            setUserExists(true)          
                        }
                     })
                     if(!userExists){
                        setUser(querySnap.docs[0].data())
                        console.log(user)
                     }
                   
                } else {
                    setUser(null)
                }
            } else {
                setShowSearch(false)
            }

        } catch (error) {
            console.error(error as Error)
        }
    }

    const addChat = async () => {
        //creates this collection when we add a chat between two users
        const messagesRef = collection(db, "messages")
        const chatsRef = collection(db, "chats")
        try {
            const newMessageRef = doc(messagesRef)
            await setDoc(newMessageRef, {
                createAt: serverTimestamp(),
                messages: []
            })
            await updateDoc(doc(chatsRef, user?.id), {
                chatData: arrayUnion({
                    messageId: newMessageRef.id,
                    lastMessage: "",
                    rid: userData[0].id,
                    updatedAt: Date.now(),
                    messageSeen: true
                })
            })
            console.log(user)
            await updateDoc(doc(chatsRef, userData[0].id), {
                chatData: arrayUnion({
                    messageId: newMessageRef.id,
                    lastMessage: "",
                    rid: user?.id,
                    updatedAt: Date.now(),
                    messageSeen: true
                })
            })
            console.log(user)
        } catch (error) {
            toast.error((error as Error).message)
            alert(error)
            console.error(error);
        }
    }
    return (
        <div className="leftSideBar bg-[#001030] text-white h-[75vh]">
            <div className="lsTop p-[20px]">
                <div className="lsNav flex justify-between items-center">
                    <img src={assets.logo} className="max-w-[140px]" alt="logo" />
                    <div className="menu  relative py-[10px] px-[0px]">
                        <img src={assets.menu_icon} className="max-h-[20px] opacity-[0.6] cursor-pointer
                        " alt="menu" />
                        <div className="sub-menu hidden bg-white text-black w-[130px] p-[20px] rounded-[5px] absolute 
                        top-[100%] right-[0]">
                            <p
                                onClick={() => navigate('/profile')}
                                className="cursor-pointer text-[14px]">Edit Profile</p>
                            <hr className="border-0 h-[1px] bg-[#a4a4a4] my-[8px] mx-[0px]" />
                            <p className="cursor-pointer text-[14px]">Logout</p>
                        </div>
                    </div>
                </div>
                <div className="lsSearch bg-[#002670] flex items-center gap-[10px]
                py-[10px] px-[12px] mt-[20px]">
                    <img src={assets.search_icon} className="w-[16px]" alt="seRchIcon" />
                    <input
                        onChange={inputHandler}
                        type="text" className="bg-[transparent] border-0 outline-0
                    text-white text-[11px] placeholder:text-[#c8c8c8]" placeholder="Search here.." />
                </div>
            </div>
            <div className="lsList flex flex-col h-[70%] overflow-y-scroll">
                {showSearch && user ?         
                    <div
                        onClick={addChat}
                        className="friends addUser  hover:bg-[#077eff] flex items-center gap-[10px] py-[10px] px-[20px]
                         cursor-pointer text-[13px]">
                        <img src={user.avatar} className="w-[35px] aspect-square
                             rounded-[50%]" alt="avatar" />
                        <p>{user.name}</p>

                    </div>  :
                    chatData.map((item, index) => (
                        <div key={index} className="friends hover:bg-[#077eff] flex items-center gap-[10px] py-[10px] px-[20px]
                         cursor-pointer text-[13px]">
                            <img src={item.userData.avatar} className="w-[35px] aspect-square
                             rounded-[50%]" alt="profileimg" />
                            <div className="flex flex-col">
                                <p>{item.userData.name}</p>
                                <span className="text-[#9F9F9F] text-[11px]">{item.lastMessage}</span>
                            </div>
                        </div>
                    ))
                }

            </div>
        </div>
    )
}
        




        import { useContext, useEffect, useState } from "react"
import assets from "../assets/assets"
import { AppContext } from "../context/AppContext"
import { arrayUnion, doc, getDoc, onSnapshot, updateDoc } from "firebase/firestore"
import { db } from "../config/firebase"
import { toast } from "react-toastify"

export const ChatBox = () => {

    const { chatUser, messagesId, setMessages, userData, messages } = useContext(AppContext)
    const [isChatOpen, setIsChatOpen] = useState<boolean>(false)
    const [input, setInput ] = useState<string>("")

    const sendMessage = async() => {
        try{
            if(input && messagesId){
                await updateDoc(doc(db,'messages', messagesId),{
                    messages:arrayUnion({
                        sid:userData[0].id,
                        text:input,
                        createdAt:new Date()                    
                    })
                })
                const userIDs = [chatUser[0].rid, userData[0].id]
                userIDs.forEach(async(id)=> {
                    const userChatsRef = doc(db, 'chats',id)
                    const userChatsSnapshot = await getDoc(userChatsRef)

                    if(userChatsSnapshot.exists()){
                        const userChatData = userChatsSnapshot.data()
                        const chatIndex = userChatData.chatData.findIndex((c:any)=>c.messageId === messagesId)
                        userChatData.chatData[chatIndex].lastMessage = input.slice(0,30)
                        userChatData.chatData[chatIndex].updatedAt = Date.now()
                        if(userChatData.chatData[chatIndex].rid === userData[0].id){
                            userChatData.chatData[chatIndex].messageSeen = false;
                        }
                        await updateDoc(userChatsRef,{
                            chatData:userChatData.chatData
                        })
                    }
                })
            }

        }catch(error){
            toast.error((error as Error).message)
          
        }
        setInput("")
    }

    useEffect(() => {
        // Assuming you want to do something when chatUser changes, like opening the chat box
        if (chatUser.length > 0) {
            setIsChatOpen(true);

        } else {
            setIsChatOpen(false);
        }
        // eslint-disable-next-line
    }, [chatUser]);

    useEffect(() => {
        if (Array.isArray(messagesId) && messagesId.length > 0) {
            const unsubscribe = messagesId.map(messageId =>
                onSnapshot(doc(db, 'messages', messageId), (res) => {
                    console.log('Snapshot received:', res); // Log the entire snapshot
                    if (res.data()) {
                        console.log('Data exists:', res.data()); // Log the data
                        console.log('Reversed messages:', res.data()?.messages.reverse()); // Attempt to reverse and log
                    } else {
                        console.log('No data found in snapshot.');
                    }
                })
            );

            // Cleanup function to unsubscribe from all snapshots
            return () => unsubscribe.forEach(unsub => unsub());
        }

    }, [messagesId, setMessages])

    if (!isChatOpen) {
        return (
            <div className="chatWelcome w-[100%] flex flex-col items-center justify-center
        gap-[5px] text-[#adadad]">
                <img src={assets.logo_icon} className="w-[60px]" alt='logoIcon' />
                <p className="text-[20px]">Chat Anytime, anywhere</p>
            </div>
        )
    }
    if (!chatUser || chatUser.length === 0) {
        return (
            <div className="chatWelcome w-[100%] flex flex-col items-center justify-center
        gap-[5px] text-[#adadad]">
                <img src={assets.logo_icon} className="w-[60px]" alt='logoIcon' />
                <p className="text-[20px]">Chat Anytime, anywhere</p>
            </div>
        )
    }
    return (
        <div className="ChatBox h-[75vh] relative bg-[#f1f5ff]">
            <div className="chatUser py-[10px] px-[15px] flex items-center gap-[10px] border-b border-[#c6c6c6]">

                <img src={chatUser[0].userData.avatar} className="w-[38px] aspect-square rounded-[50%]" alt="pro-img" />
                <p className="flex flex-[1] items-center gap-[5px] font-[500] text-[20px] text-[#393939]">{chatUser[0].userData.name}<img src={assets.green_dot} className="w-[15px]" alt="grendot" /></p>
                <img src={assets.help_icon} className="w-[25px]" alt="help" />
            </div>

            <div className="chatMessage h-chat-height pb-[50px] overflow-y-scroll
            flex flex-col-reverse">
                {messages.map((msg, index)=>(
                     <div className="s-msg flex items-end justify-end gap-[5px] py-[0] px-[15px]">
                     <p className="msg rounded-SmsgBorderRadius text-white bg-[#077eff] p-[8px] max-w-[200px]
                     text-[11px] font-[300] mb-[30px]">
                         Lorem ipsum dolor sit amet consectetur.
                     </p>
                     <div className="text-center text-[9px]">
                         <img src={chatUser[0].userData.avatar} className="w-[27px] aspect-square rounded-[50px]" alt="proImg" />
                         <p>2:30pm</p>
                     </div>
                 </div>
                ))}
               

                </div>



            <div className="chatInput flex items-center gap-[12px] py-[10px] px-[15px]
            bg-white absolute bottom-0 left-0 right-0">
                <input value={input} onChange={(e) => setInput(e.target.value)} type="text" className="flex-[1] border-0 outline-0" placeholder="Send a message" />
                <input type="file" id="image" accept="image/png, image/jpeg" hidden className="" />
                <label htmlFor="image" className="flex">
                    <img src={assets.gallery_icon} className="w-[22px] cursor-pointer" alt="galleryIcon" />
                </label>
                <img onClick={sendMessage} src={assets.send_button} className="w-[30px] cursor-pointer" alt="sendButton" />
            </div>
        </div>

    )
}












<div className="s-msg flex items-end justify-end gap-[5px] py-[0] px-[15px]">
                    <img src={assets.pic1} className="max-w-[230px] mb-[30px] rounded-[10px]" alt="pic1" />
                    <div className="text-center text-[9px]">
                        <img src={assets.profile_img} className="w-[27px] aspect-square rounded-[50px]" alt="proImg" />
                        <p>2:30pm</p>
                    </div>
                </div>
                <div className="r-msg flex flex-row-reverse justify-end items-end gap-[5px] py-[0] px-[15px]">
                    <p className="msg rounded-RmsgBorderRadius text-white bg-[#077eff] p-[8px] max-w-[200px]
                    text-[11px] font-[300] mb-[30px]">
                        Lorem ipsum dolor sit amet consectetur.
                    </p>
                    <div className="text-center text-[9px]">
                        <img src={assets.profile_img} className="w-[27px] rounded-[50px] aspect-square" alt="proImg" />
                        <p>2:30pm</p>
                    </div>
                </div>
            